Spring框架技术
建议: 对java开发还不是很熟悉的同学 最好先花费半个月到一个月时间大量地去编写小项目 不推荐一口气学完 后面的内容相比前面的内容几乎是降维打击
一口气学完很容易忘记之前所学的基础知识尤其是javaSE阶段的内容

恭喜各位顺利进入到SSM(Spring + SpringMVC + Mybatis)阶段的学习 也算是成功出了java新手村 由于前面我们已经学习过Mybatis了 因此 本期教程的时间安排相比之前会更短一些
从这里开始 很多的概念理解起来就稍微有一点难度了 因为你们没有接触过企业开发场景 很难体会到那种思想带来的好处 甚至到后期接触到的几乎都是基于云计算和大数据理论实现的框架
(当下最前沿的技术) 逐渐不再是和计算机基础相关联 而是和怎么高效干活相关了

在javaWeb阶段 我们已经学习了如何使用java进行Web应用程序开发 我们现在已经具有搭建Web网站的能力 但是 我们在开发过程中 发现存在诸多的不便 在最后的图书管理系统编程实战中 我们发现虽然我们思路清晰
知道如何编写对应的接口 但是这样的开发效率 实在是太慢了 并且对于对象创建的管理 存在诸多的不妥之处 因此 我们要去继续学习更多的框架技术 来简化规范我们的java开发

Spring就是这样的一个框架(文档: https://docs.spring.io/spring-famework/docs/5.2.13.RELEASE/spring-framevork-reference/)
它就是为了简化开发而生 它是轻量级的IoC和AOP的容器框架 主要针对javaBean的生命周期进行管理的轻量级容器 并且他的生态已经发展得极为庞大
那么首先一问 什么是IoC和AOP 什么又是javaBean呢 只是听起来慢慢的高级感 实际上没有多高级(很多东西都是这样 名字听起来很牛 实际上只是一个很容易理解的东西)

因此 一切的一切 我们还要从javaBean说起 从这颗豆子生根发芽开始

什么是javaBean
javaBean就是有一定规范的java实体类 跟普通类差不多 不同的是类内部提供了一些公共的方法以便对该对象内部属性进行操作 比如set get操作实际上 就是我们之前一直在用的:
                    public class User{
                        private String name;
                        private int age;

                        public String getName(){
                            return name;
                        }
                        public String getAge(){
                            return age;
                        }
                        public void setName(String name){
                            this.name = name;
                        }
                        public void setAge(int age){
                            this.age = age;
                        }
                    }
他的所有属性都是private 所有的属性都可以通过get/set方法进行访问 同时还需要一个无参构造(默认就有) 因此我们之前编写的很多类 其实都可以是一个javaBean

IoC理论基础
在我们之前的图书管理系统Web应用程序中 我们发现 整程序其实是依靠各个部分相互协作 共同完成一个操作 比如要展示借阅信息列表 那么首先需要使用Servlet进行请求和响应的数据处理
然后请求的数据全部交给对应的Service(业务层)来处理 当然Service发现要从数据库中获取数据时 再向对应的Mapper发起请求

它们之间就像连接在一起的齿轮 谁也离不开谁 就像一个团队 每个人的分工明确 流水线上的一套操作必须环环相扣这是一种高度耦合的体系

虽然这样的体系逻辑非常清晰 整个流程也能够让人快速了解 但是这样存在一个很严重的问题 我们现在的时代实际上是一个软件项目高速迭代的时代 我们发现很多App三天两头隔三岔五地更新 而且是什么功能当下最火
就马不停蹄地进行跟进开发 因此就很容易出现 之前写好的代码 实现的功能 需要全部推翻 改成新的功能 那么我们就不得不去修改某些流水线上的模块 但是这样一修改 会直接导致整个流水线的引用关系大面积更新

就像我不想用这个Service实现类了 我想使用其他的实现类用不同的逻辑做这些功能 那么这个时候 我们只能每个类都去挨个进行修改 当项目特别大时 光是改个类名就够改一天

因此 高度耦合带来的缺点是特别明显的 也是现代软件开发中很致命的问题 如果要改善这种情况 我们只能将各个模块进行解耦 让各个模块之间的依赖性不再那么的强 也就是说
service的实现类 不再由我们决定 而是让程序自己决定 所有的实现类对象 全部交给程序来管理 所有对象之间的关系也由程序来动态决定 这样就引入了IoC理论

IoC是Inversion of Control的缩写 翻译为: "控制反转" 把复杂系统分解成相互合作的对象 这些对象类通过封装以后 内部实现对外部是透明的 从而降低了解决问题的复杂度 而且可以灵活地被重用和扩展

我们可以将对象交给IoC容器进行管理 比如当我们需要一个接口的实现时 由它根据配置文件来决定到底给我们哪一个实体类 这样 我们就可以不用再关心我们要去使用哪一个实现类了
我们只需要关心 给到我的一定是一个可以正常使用的实现类 就用就完事了 反正接口定义了啥 我只管调 我们就可以放心地让一个人去写视图层的代码 一个人去写业务层的代码 开发效率那是高的一批啊

高内聚 低耦合 是现代软件开发的设计目标 而Spring框架就给我们提供了这样的一个IoC容器进行对象的管理



